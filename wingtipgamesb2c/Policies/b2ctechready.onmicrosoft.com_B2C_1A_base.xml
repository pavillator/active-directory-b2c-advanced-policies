<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<TrustFrameworkPolicy
  PolicySchemaVersion="0.3.0.0"
  TenantId="b2ctechready.onmicrosoft.com"
  PolicyId="B2C_1A_base"
  PublicPolicyUri="http://b2ctechready.onmicrosoft.com"
  xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <BuildingBlocks>
    <ClaimsSchema>
      <!-- The following claim types are required for the user journeys. -->
      <ClaimType Id="alternativeSecurityId">
        <DisplayName>Alternative Security ID</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="authenticationSource">
        <DisplayName>Authentication Source</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="countryCode">
        <DisplayName>Country</DisplayName>
        <DataType>string</DataType>
        <UserInputType>DropdownSingleSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="displayName">
        <DisplayName>Display Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="email">
        <DisplayName>Email Address</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="email" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="email" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/email" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9.!#$%&amp;'^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$" HelpText="Enter a valid email address." />
        </Restriction>
      </ClaimType>
      <ClaimType Id="executed-PhoneFactor-Input">
        <DisplayName>Executed Phone Factor Input</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="executed-SelfAsserted-Input">
        <DisplayName>Executed Self Asserted Input</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="givenName">
        <DisplayName>Given Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="given_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="given_name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="identityProvider">
        <DisplayName>Identity Provider</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="idp" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="idp" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/identityprovider" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="isActivePhoneFactorSession">
        <DisplayName>Is Active Phone Factor Session</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="mailNickname">
        <DisplayName>Mail Nickname</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="newPassword">
        <DisplayName>New Password</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Password</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]))([A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~&quot;();!]|\.(?!@)){8,16}$" HelpText="8-16 characters, containing 3 out of 4 of the following: Lowercase characters, uppercase characters, digits (0-9), and one or more of the following symbols: @ # $ % ^ &amp; * - _ + = [ ] { } | \ : ' , ? / ` ~ &quot; ( ) ; ." />
        </Restriction>
      </ClaimType>
      <ClaimType Id="newUser">
        <DisplayName>New User</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="objectId">
        <DisplayName>Object ID</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="oid" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="oid" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/objectidentifier" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="otherMails">
        <DisplayName>Alternate Email Addresses</DisplayName>
        <DataType>stringCollection</DataType>
      </ClaimType>
      <ClaimType Id="password">
        <DisplayName>Password</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Password</UserInputType>
      </ClaimType>
      <ClaimType Id="passwordPolicies">
        <DisplayName>Password Policies</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="reenterPassword">
        <DisplayName>Confirm New Password</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Password</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]))([A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~&quot;();!]|\.(?!@)){8,16}$" HelpText=" " />
        </Restriction>
      </ClaimType>
      <ClaimType Id="signInName">
        <DisplayName>Sign-in name</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="signInNameIsSameAsEmail">
        <DisplayName>Sign-in Name is same as Email Address</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="signInNameIsSameAsPhone">
        <DisplayName>Sign-in Name is same as Phone Number</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="signInNames.emailAddress">
        <DisplayName>Email Address</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="signInNames.phoneNumber">
        <DisplayName>Phone Number</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationPhoneNumber">
        <DisplayName>Phone Number</DisplayName>
        <DataType>string</DataType>
        <Mask Type="Simple">XXX-XXX-</Mask>
      </ClaimType>
      <ClaimType Id="sub">
        <DisplayName>Subject</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="sub" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="sub" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="surname">
        <DisplayName>Surname</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="family_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="family_name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="tenantId">
        <DisplayName>Tenant ID</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="tid" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="tid" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/tenantid" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="userId">
        <DisplayName>User ID</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$" HelpText="The user ID you have entered is not valid. It must begin with a letter or a digit and it can contain letters, digits and the following symbols: _ -" />
        </Restriction>
      </ClaimType>
      <ClaimType Id="userName">
        <DisplayName>User Name</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="userPrincipalName">
        <DisplayName>User Principal Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="upn" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="upn" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="Verified.strongAuthenticationPhoneNumber">
        <DisplayName>Verified Phone Number</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="phone_number" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="phone_number" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone" />
        </DefaultPartnerClaimTypes>
        <Mask Type="Simple">XXX-XXX-</Mask>
      </ClaimType>
      <!-- The following claim types are required for the claims exchanges. -->
      <ClaimType Id="client_id">
        <DisplayName>client_id</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="displayNameFromSocialAccount">
        <DisplayName>Display Name from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="emailFromSocialAccount">
        <DisplayName>Email from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="fromMailAddress">
        <DisplayName>From Mail Address</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="givenNameFromSocialAccount">
        <DisplayName>Given Name from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="grant_type">
        <DisplayName>grant_type</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="nca">
        <DisplayName>nca</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="objectIdFromSession">
        <DisplayName>objectIdFromSession</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="prompt">
        <DisplayName>prompt</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="scope">
        <DisplayName>scope</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationAppCode">
        <DisplayName>Verified App Code</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationAppQRCodeBitmap">
        <DisplayName>Verified App QR Code Bitmap</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <ClaimType Id="surnameFromSocialAccount">
        <DisplayName>Surname from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="toMailAddress">
        <DisplayName>To Mail Address</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <!-- The following claim types can be collected from the end users, managed in the Azure Active Directory store, and sent as
           claims in the security tokens. -->
      <ClaimType Id="extension_ActivationStatus">
        <DisplayName>Activation Status</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="activation_status" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="activation_status" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/activationstatus" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_AuthyId">
        <DisplayName>Authy Id</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_Brand">
        <DisplayName>Brand</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="brand" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="brand" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/brand" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_Gender">
        <DisplayName>Gender</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="gender" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="gender" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender" />
        </DefaultPartnerClaimTypes>
        <UserInputType>DropdownSingleSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_GenderFromSocialAccount">
        <DisplayName>Gender from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="extension_ListenerGenre">
        <DisplayName>Listener Genre</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="listener_genre" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="listener_genre" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/listenergenre" />
        </DefaultPartnerClaimTypes>
        <UserInputType>DropdownSingleSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_MarketingConsented">
        <DisplayName>Marketing Consented</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="marketing_consented" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="marketing_consented" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/marketingconsented" />
        </DefaultPartnerClaimTypes>
        <UserInputType>CheckboxMultiSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_MarketingFrequency">
        <DisplayName>Marketing Frequency</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="marketing_frequency" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="marketing_frequency" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/marketingfrequency" />
        </DefaultPartnerClaimTypes>
        <UserInputType>DropdownSingleSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_Nonce">
        <DisplayName>Nonce</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="nonce" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="nonce" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/nonce" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_Picture">
        <DisplayName>Picture</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="picture" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="picture" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/picture" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_PictureFromSocialAccount">
        <DisplayName>Picture from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="extension_PlayerBio">
        <DisplayName>Player Bio</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="player_bio" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="player_bio" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/playerbio" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_PlayerMotto">
        <DisplayName>Player Motto</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="player_motto" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="player_motto" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/playermotto" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_PlayerProfilePercentComplete">
        <DisplayName>Player Profile Percent Complete</DisplayName>
        <DataType>int</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="player_profile_percent_complete" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="player_profile_percent_complete" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/playerprofilepercentcomplete" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_PlayerProfileRegistrationMode">
        <DisplayName>Player Profile Registration Mode</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="player_profile_registration_mode" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="player_profile_registration_mode" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/playerprofileregistrationmode" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_PlayerTag">
        <DisplayName>Player Tag</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="player_tag" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="player_tag" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/playertag" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_PlayerZone">
        <DisplayName>Player Zone</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="player_zone" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="player_zone" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/playerzone" />
        </DefaultPartnerClaimTypes>
        <UserInputType>DropdownSingleSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_ReadOnlyPlayerTag">
        <DisplayName>Read-Only Player Tag</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_StrongAuthenticationAppSecretKey">
        <DisplayName>Verified App Secret Key</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_StrongAuthenticationAppTimeStepMatched">
        <DisplayName>Verified App Time Step Matched</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="extension_TermsOfServiceConsented">
        <DisplayName>Terms of Service Consented</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="tos_consented" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="tos_consented" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/tosconsented" />
        </DefaultPartnerClaimTypes>
        <UserInputType>CheckboxMultiSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_VerifiedEmail">
        <DisplayName>Verified Email</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="verified_email" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="verified_email" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.wingtipb2c.net/identity/claims/verifiedemail" />
        </DefaultPartnerClaimTypes>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
    </ClaimsSchema>
    <ClaimsTransformations>
      <ClaimsTransformation Id="CompareSignInNameAndEmailClaims" TransformationMethod="CompareClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="signInName" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="signInNames.emailAddress" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="operator" DataType="string" Value="equal" />
          <InputParameter Id="ignoreCase" DataType="string" Value="true" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="signInNameIsSameAsEmail" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CompareSignInNameAndPhoneClaims" TransformationMethod="CompareClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="signInName" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="signInNames.phoneNumber" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="operator" DataType="string" Value="equal" />
          <InputParameter Id="ignoreCase" DataType="string" Value="true" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="signInNameIsSameAsPhone" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the alternative security identifier for an external user. -->
      <ClaimsTransformation Id="CreateAlternativeSecurityId" TransformationMethod="CreateAlternativeSecurityId">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="userId" TransformationClaimType="key" />
          <InputClaim ClaimTypeReferenceId="identityProvider" TransformationClaimType="identityProvider" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="alternativeSecurityId" TransformationClaimType="alternativeSecurityId" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the mail address for an external user. -->
      <ClaimsTransformation Id="CreateEmailFromEmailFromSocialAccount" TransformationMethod="FormatStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="emailFromSocialAccount" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="email" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the mail address for a user. -->
      <ClaimsTransformation Id="CreateEmailFromVerifiedEmail" TransformationMethod="FormatStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="extension_VerifiedEmail" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="email" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation generates the user name for an external user. -->
      <ClaimsTransformation Id="CreateExternalUserName" TransformationMethod="CreateRandomString">
        <InputParameters>
          <InputParameter Id="randomGeneratorType" DataType="string" Value="GUID" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="userName" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation formats the user principal name for an external user. -->
      <ClaimsTransformation Id="CreateExternalUserPrincipalName" TransformationMethod="FormatStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="userName" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}@{RelyingPartyTenantId}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="userPrincipalName" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the mail address from which a mail message is sent to a user. -->
      <ClaimsTransformation Id="CreateFromMailAddress" TransformationMethod="CreateStringClaim">
        <InputParameters>
          <InputParameter Id="value" DataType="string" Value="no-reply@wingtiptoys.net" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="fromMailAddress" TransformationClaimType="createdClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the alternative mail addresses for an external user. -->
      <ClaimsTransformation Id="CreateOtherMailsFromEmail" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the alternative mail addresses for an external user. -->
      <ClaimsTransformation Id="CreateOtherMailsFromEmailFromSocialAccount" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="emailFromSocialAccount" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation formats the player tag for an external user. -->
      <ClaimsTransformation Id="CreateReadOnlyPlayerTagFromPlayerTag" TransformationMethod="FormatStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="extension_PlayerTag" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="extension_ReadOnlyPlayerTag" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the subject for a user. -->
      <ClaimsTransformation Id="CreateSubject" TransformationMethod="CreateStringClaim">
        <InputParameters>
          <InputParameter Id="value" DataType="string" Value="Not supported currently. Use oid claim." />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="sub" TransformationClaimType="createdClaim" />
        </OutputClaims>
      </ClaimsTransformation>
    </ClaimsTransformations>
    <ContentDefinitions>
      <!-- The following content definition is used for errors. -->
      <ContentDefinition Id="api.error">
        <LoadUri>~/tenant/default/exception.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:globalexception:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Error page</Item>
        </Metadata>
      </ContentDefinition>
      <!-- The following content definition is used for selecting an identity provider. -->
      <ContentDefinition Id="api.idpselection.signin">
        <LoadUri>~/tenant/default/idpselector.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:idpselection:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Identity provider selection page</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.idpselection.signin.en" />
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.idpselection.signin.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for selecting an identity provider. -->
      <ContentDefinition Id="api.idpselection.signupsignin">
        <LoadUri>~/tenant/default/idpselector.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:idpselection:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Identity provider selection page</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.idpselection.signupsignin.en" />
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.idpselection.signupsignin.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a local account via an activation link. -->
      <ContentDefinition Id="api.localaccount.activation">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Password Recovery</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.activation.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.activation.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccount.discovery">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Discovery</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.discovery.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.discovery.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account. -->
      <ContentDefinition Id="api.localaccount.login">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account using an app code. -->
      <ContentDefinition Id="api.localaccount.login.appcode">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.appcode.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.appcode.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account using an Authy code. -->
      <ContentDefinition Id="api.localaccount.login.authycode">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.authycode.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.authycode.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account using an e-mail code. -->
      <ContentDefinition Id="api.localaccount.login.emailcode">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.emailcode.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.emailcode.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account using a phone code. -->
      <ContentDefinition Id="api.localaccount.login.phonecode">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.phonecode.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.login.phonecode.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for recovering the password for a local account. -->
      <ContentDefinition Id="api.localaccount.passwordrecovery">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Password Recovery</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.passwordrecovery.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.passwordrecovery.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for resetting the password for a local account. -->
      <ContentDefinition Id="api.localaccount.passwordreset">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Password Reset</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.passwordreset.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.passwordreset.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for setting the password for a local account. -->
      <ContentDefinition Id="api.localaccount.passwordset">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Password Set</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.passwordset.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.passwordset.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a local account. -->
      <ContentDefinition Id="api.localaccount.registration">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.registration.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.localaccount.registration.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering, validating, and verifying a verification phone. -->
      <ContentDefinition Id="api.phonefactor">
        <LoadUri>~/tenant/default/multifactor-1.0.0.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:multifactor:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Phone Factor</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.phonefactor.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.phonefactor.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a verification app. -->
      <ContentDefinition Id="api.selfasserted.appfactor.registration">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">App Factor</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.appfactor.registration.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.appfactor.registration.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for verifying a verification app. -->
      <ContentDefinition Id="api.selfasserted.appfactor.verification">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">App Factor</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.appfactor.verification.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.appfactor.verification.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering, validating, and verifying an Authy account. -->
      <ContentDefinition Id="api.selfasserted.authyfactor">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Authy Factor</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.authyfactor.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.authyfactor.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for updating the consent for a user. -->
      <ContentDefinition Id="api.selfasserted.consent">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Consent</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.consent.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.consent.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for updating the listener profile for a user. -->
      <ContentDefinition Id="api.selfasserted.listenerprofileupdate">
        <LoadUri>~/tenant/default/updateProfile.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Listener Profile Update</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.listenerprofileupdate.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.listenerprofileupdate.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering the minimum player profile for a user. -->
      <ContentDefinition Id="api.selfasserted.playerprofileregistration.basic">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Player Profile Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.playerprofileregistration.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.playerprofileregistration.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering the maximum player profile for a user. -->
      <ContentDefinition Id="api.selfasserted.playerprofileregistration.full">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Player Profile Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.playerprofileregistration.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.playerprofileregistration.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for updating the player profile for a user. -->
      <ContentDefinition Id="api.selfasserted.playerprofileupdate">
        <LoadUri>~/tenant/default/updateProfile.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Player Profile Update</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.playerprofileupdate.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.selfasserted.playerprofileupdate.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a user. -->
      <ContentDefinition Id="api.signupsignin">
        <LoadUri>~/tenant/default/unified.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:unifiedssp:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Account Login or Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.signupsignin.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.signupsignin.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a social account. -->
      <ContentDefinition Id="api.socialaccount.registration">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Social Account Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" Url="https://bing.com" LocalizedResourcesReferenceId="api.socialaccount.registration.en" />
          <LocalizedResourcesReference Language="fr" Url="https://bing.com" LocalizedResourcesReferenceId="api.socialaccount.registration.fr" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
    </ContentDefinitions>
    <Localization Enabled="true">
      <SupportedLanguages DefaultLanguage="en" MergeBehavior="ReplaceAll">
        <SupportedLanguage>en</SupportedLanguage>
        <SupportedLanguage>fr</SupportedLanguage>
      </SupportedLanguages>
      <LocalizedResources Culture="en">
        <LocalizedCollections>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_ListenerGenre" TargetCollection="Restriction">
            <Item Text="All genres" Value="All" />
            <Item Text="Classical" Value="Classical" />
            <Item Text="Country" Value="Country" />
            <Item Text="Electronic / Dance" Value="Electronic" />
            <Item Text="Hip hop" Value="HipHop" />
            <Item Text="Jazz" Value="Jazz" />
            <Item Text="More" Value="More" />
            <Item Text="Pop" Value="Pop" />
            <Item Text="R &amp; B / Soul" Value="RNB" />
            <Item Text="Rock" Value="Rock" />
            <Item Text="Soundtracks" Value="Soundtracks" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_MarketingConsented" TargetCollection="Restriction">
            <Item Text="I am agreeing to receiving promotional offers by email" Value="true" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_MarketingFrequency" TargetCollection="Restriction">
            <Item Text="Daily" Value="Daily" />
            <Item Text="Weekly" Value="Weekly" />
            <Item Text="Monthly" Value="Monthly" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_PlayerZone" TargetCollection="Restriction">
            <Item Text="Family" Value="Family" />
            <Item Text="Professional" Value="Professional" />
            <Item Text="Recreation" Value="Recreation" />
            <Item Text="Underground" Value="Underground" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_TermsOfServiceConsented" TargetCollection="Restriction">
            <Item Text="I am agreeing to the WingTip Toys terms of service" Value="2017-03-09" />
          </LocalizedCollection>
        </LocalizedCollections>
      </LocalizedResources>
      <LocalizedResources Id="api.idpselection.signin.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="intro">Sign in with your existing account</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.idpselection.signupsignin.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="intro">Sign in with your social account or create a WingTip account</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.activation.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Confirm your email address.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're preparing your WingTip account</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.discovery.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Next</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your WingTip account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're finding your WingTip account</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="signInName" StringId="DisplayName">Email address or phone number</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Sign in</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your WingTip account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're signing you in</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="signInName" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="password" StringId="DisplayName">Password</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.appcode.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your WingTip account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're finding your authentication app</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.authycode.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your WingTip account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're finding your Authy account</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.emailcode.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Sign in</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your WingTip account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Change</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Send another</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Send sign-in code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">We've sent you a sign-in code. Copy it to the input field below.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Sign-in code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">We've verified your email address. You can now sign in.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're signing you in</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.phonecode.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your WingTip account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're finding your phone number</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordrecovery.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Enter your email address and we'll send you a verification code.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Change</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Send another</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Send verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">We've sent you a verification code. Copy it to the input field below.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">We've verified your email address. You can now continue.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're preparing your password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordreset.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Enter your new password.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're resetting your password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">New password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Confirm new password</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordset.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Enter your new password.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're setting your password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">New password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Confirm new password</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.registration.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Create your WingTip account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="required_field">You must enter this field</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Change</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Send another</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Send verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">We've sent you a verification code. Copy it to the input field below.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">We've verified your email address. You can now continue.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're creating your WingTip account</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">New password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Confirm new password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="displayName" StringId="DisplayName">Display name</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.phonefactor.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_send_code">Text me</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="button_verify">Call me</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="country_code_label">Country code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="enter_code_text_intro">Enter the verification code or </LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="intro_entry_mixed">Enter your phone number and we'll send you a verification code by either a text message or a phone call.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="intro_mixed">We have your phone number. We'll send you a verification code by either a text message or a phone call.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_number">You must enter a valid phone number</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="number_label">Phone number</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="text_button_send_second_code">send another verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="error_incorrect_code">You must enter the verification code that we sent you</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.appfactor.registration.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro"></LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're registering your authentication app</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="strongAuthenticationAppCode" StringId="DisplayName">3. Enter the verification code</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.appfactor.verification.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Get a verification code from your authentication app.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're verifying your authentication app</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="strongAuthenticationAppCode" StringId="DisplayName">Enter the verification code</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.authyfactor.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Send</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Send an approval request to your Authy account.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're waiting for you to approve the approval request</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.consent.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Before you can continue using our online services, you must agree to the WingTip Toys terms of service.</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_TermsOfServiceConsented" StringId="DisplayName">Accept terms of service</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.listenerprofileupdate.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Update</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Update your WingTip listener profile</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're updating your WingTip listener profile</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_ListenerGenre" StringId="DisplayName">Listener genre</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_MarketingFrequency" StringId="DisplayName">Frequency</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.playerprofileupdate.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Update</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Update your WingTip player profile</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're updating your WingTip player profile</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_ReadOnlyPlayerTag" StringId="DisplayName">Player tag</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerZone" StringId="DisplayName">Player zone</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerMotto" StringId="DisplayName">Player motto</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerBio" StringId="DisplayName">Player bio</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_MarketingFrequency" StringId="DisplayName">Frequency</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.playerprofileregistration.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Create</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Create your WingTip player profile</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're creating your WingTip player profile</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerTag" StringId="DisplayName">Player tag</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerZone" StringId="DisplayName">Player zone</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerMotto" StringId="DisplayName">Player motto</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerBio" StringId="DisplayName">Player bio</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_MarketingFrequency" StringId="DisplayName">Frequency</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.signupsignin.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="createaccount_intro">Don't have a WingTip account?</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="createaccount_link">Create one now!</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_email">You must enter a valid email address</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_password">You must enter a valid password</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="local_intro_email">Sign in with your WingTip account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="logonIdentifier_email">Email address</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="remember_me">Keep me signed in</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="requiredField_email">You must enter an email address</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="requiredField_password">You must enter a password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="password" StringId="DisplayName">Password</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.socialaccount.registration.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Register</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Register your social account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're registering your social account</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Culture="fr">
        <LocalizedCollections>
          <LocalizedCollection ElementType="ClaimType" ElementId="countryCode" TargetCollection="Restriction">
            <Item Text="Aruba" Value="ABW" />
            <Item Text="Afghanistan" Value="AFG" />
            <Item Text="Angola" Value="AGO" />
            <Item Text="Anguilla" Value="AIA" />
            <Item Text="Albanie" Value="ALB" />
            <Item Text="Andorre" Value="AND" />
            <Item Text="Emirats Arabes Unis" Value="ARE" />
            <Item Text="Argentine" Value="ARG" />
            <Item Text="Arménie" Value="ARM" />
            <Item Text="Samoa américaines" Value="ASM" />
            <Item Text="Antigua-et-Barbuda" Value="ATG" />
            <Item Text="Australie" Value="AUS" />
            <Item Text="Autriche" Value="AUT" />
            <Item Text="Azerbaïdjan" Value="AZE" />
            <Item Text="Burundi" Value="BDI" />
            <Item Text="Belgique" Value="BEL" />
            <Item Text="Bénin" Value="BEN" />
            <Item Text="Burkina Faso" Value="BFA" />
            <Item Text="Bangladesh" Value="BGD" />
            <Item Text="Bulgarie" Value="BGR" />
            <Item Text="Bahreïn" Value="BHR" />
            <Item Text="Bahamas" Value="BHS" />
            <Item Text="Bosnie-et-Herzégovine" Value="BIH" />
            <Item Text="Bélarus" Value="BLR" />
            <Item Text="Belize" Value="BLZ" />
            <Item Text="Bermudes" Value="BMU" />
            <Item Text="Bolivie" Value="BOL" />
            <Item Text="Brésil" Value="BRA" />
            <Item Text="Barbade" Value="BRB" />
            <Item Text="Brunei" Value="BRN" />
            <Item Text="Bhoutan" Value="BTN" />
            <Item Text="Botswana" Value="BWA" />
            <Item Text="République centrafricaine" Value="CAF" />
            <Item Text="Canada" Value="CAN" />
            <Item Text="Suisse" Value="CHE" />
            <Item Text="Chili" Value="CHL" />
            <Item Text="RP Chine" Value="CHN" />
            <Item Text="Côte d'Ivoire" Value="CIV" />
            <Item Text="Cameroun" Value="CMR" />
            <Item Text="RD Congo" Value="COD" />
            <Item Text="Congo" Value="COG" />
            <Item Text="Cook (Iles)" Value="COK" />
            <Item Text="Colombie" Value="COL" />
            <Item Text="Comores" Value="COM" />
            <Item Text="Cap-Vert" Value="CPV" />
            <Item Text="Costa Rica" Value="CRI" />
            <Item Text="Cuba" Value="CUB" />
            <Item Text="Curacao" Value="CUW" />
            <Item Text="Caïmans (Iles)" Value="CYM" />
            <Item Text="Chypre" Value="CYP" />
            <Item Text="République tchèque" Value="CZE" />
            <Item Text="Allemagne" Value="DEU" />
            <Item Text="Djibouti" Value="DJI" />
            <Item Text="Dominique" Value="DMA" />
            <Item Text="Danemark" Value="DNK" />
            <Item Text="République dominicaine" Value="DOM" />
            <Item Text="Algérie" Value="DZA" />
            <Item Text="Equateur" Value="ECU" />
            <Item Text="Egypte" Value="EGY" />
            <Item Text="Erythrée" Value="ERI" />
            <Item Text="Espagne" Value="ESP" />
            <Item Text="Estonie" Value="EST" />
            <Item Text="Ethiopie" Value="ETH" />
            <Item Text="Kosovo" Value="FFK" />
            <Item Text="Finlande" Value="FIN" />
            <Item Text="Fidji" Value="FJI" />
            <Item Text="France" Value="FRA" />
            <Item Text="Féroé (Iles)" Value="FRO" />
            <Item Text="Gabon" Value="GAB" />
            <Item Text="Royaume-Uni" Value="GBR" />
            <Item Text="Géorgie" Value="GEO" />
            <Item Text="Ghana" Value="GHA" />
            <Item Text="Gibraltar" Value="GIB" />
            <Item Text="Guinée" Value="GIN" />
            <Item Text="Gambie" Value="GMB" />
            <Item Text="Guinée-Bissau" Value="GNB" />
            <Item Text="Guinée Équatoriale" Value="GNQ" />
            <Item Text="Grèce" Value="GRC" />
            <Item Text="Grenade" Value="GRD" />
            <Item Text="Guatemala" Value="GTM" />
            <Item Text="Guam" Value="GUM" />
            <Item Text="Guyana" Value="GUY" />
            <Item Text="Hongkong" Value="HKG" />
            <Item Text="Honduras" Value="HND" />
            <Item Text="Croatie" Value="HRV" />
            <Item Text="Haïti" Value="HTI" />
            <Item Text="Hongrie" Value="HUN" />
            <Item Text="Indonésie" Value="IDN" />
            <Item Text="Inde" Value="IND" />
            <Item Text="République d’Irlande" Value="IRL" />
            <Item Text="Iran" Value="IRN" />
            <Item Text="Irak" Value="IRQ" />
            <Item Text="Islande" Value="ISL" />
            <Item Text="Israël" Value="ISR" />
            <Item Text="Italie" Value="ITA" />
            <Item Text="Jamaïque" Value="JAM" />
            <Item Text="Jordanie" Value="JOR" />
            <Item Text="Japon" Value="JPN" />
            <Item Text="Kazakhstan" Value="KAZ" />
            <Item Text="Kenya" Value="KEN" />
            <Item Text="Kirghizistan" Value="KGZ" />
            <Item Text="Cambodge" Value="KHM" />
            <Item Text="Saint-Kitts-et-Nevis" Value="KNA" />
            <Item Text="République de Corée" Value="KOR" />
            <Item Text="Koweït" Value="KWT" />
            <Item Text="Laos" Value="LAO" />
            <Item Text="Liban" Value="LBN" />
            <Item Text="Libéria" Value="LBR" />
            <Item Text="Libye" Value="LBY" />
            <Item Text="Sainte-Lucie" Value="LCA" />
            <Item Text="Liechtenstein" Value="LIE" />
            <Item Text="Sri Lanka" Value="LKA" />
            <Item Text="Lesotho" Value="LSO" />
            <Item Text="Lituanie" Value="LTU" />
            <Item Text="Luxembourg" Value="LUX" />
            <Item Text="Lettonie" Value="LVA" />
            <Item Text="Macau" Value="MAC" />
            <Item Text="Maroc" Value="MAR" />
            <Item Text="Moldavie" Value="MDA" />
            <Item Text="Madagascar" Value="MDG" />
            <Item Text="Maldives (Iles)" Value="MDV" />
            <Item Text="Mexique" Value="MEX" />
            <Item Text="ARY Macédoine" Value="MKD" />
            <Item Text="Mali" Value="MLI" />
            <Item Text="Malte" Value="MLT" />
            <Item Text="Myanmar" Value="MMR" />
            <Item Text="Monténégro" Value="MNE" />
            <Item Text="Mongolie" Value="MNG" />
            <Item Text="Mozambique" Value="MOZ" />
            <Item Text="Mauritanie" Value="MRT" />
            <Item Text="Montserrat" Value="MSR" />
            <Item Text="Maurice" Value="MUS" />
            <Item Text="Malawi" Value="MWI" />
            <Item Text="Malaisie" Value="MYS" />
            <Item Text="Namibie" Value="NAM" />
            <Item Text="Nouvelle-Calédonie" Value="NCL" />
            <Item Text="Niger" Value="NER" />
            <Item Text="Nigeria" Value="NGA" />
            <Item Text="Nicaragua" Value="NIC" />
            <Item Text="Pays-Bas" Value="NLD" />
            <Item Text="Norvège" Value="NOR" />
            <Item Text="Népal" Value="NPL" />
            <Item Text="Nouvelle-Zélande" Value="NZL" />
            <Item Text="Oman" Value="OMN" />
            <Item Text="Pakistan" Value="PAK" />
            <Item Text="Panama" Value="PAN" />
            <Item Text="Pérou" Value="PER" />
            <Item Text="Philippines" Value="PHL" />
            <Item Text="Papouasie-Nouvelle-Guinée" Value="PNG" />
            <Item Text="Pologne" Value="POL" />
            <Item Text="Porto Rico" Value="PRI" />
            <Item Text="RDP Corée" Value="PRK" />
            <Item Text="Portugal" Value="PRT" />
            <Item Text="Paraguay" Value="PRY" />
            <Item Text="Palestine" Value="PSE" />
            <Item Text="Tahiti" Value="PYF" />
            <Item Text="Qatar" Value="QAT" />
            <Item Text="Roumanie" Value="ROU" />
            <Item Text="Russie" Value="RUS" />
            <Item Text="Rwanda" Value="RWA" />
            <Item Text="Arabie Saoudite" Value="SAU" />
            <Item Text="Soudan" Value="SDN" />
            <Item Text="Sénégal" Value="SEN" />
            <Item Text="Singapour" Value="SGP" />
            <Item Text="Salomon (Iles)" Value="SLB" />
            <Item Text="Sierra Leone" Value="SLE" />
            <Item Text="Salvador" Value="SLV" />
            <Item Text="Saint-Marin" Value="SMR" />
            <Item Text="Somalie" Value="SOM" />
            <Item Text="Serbie" Value="SRB" />
            <Item Text="Soudan du Sud" Value="SSD" />
            <Item Text="Sao Tomé e Principe" Value="STP" />
            <Item Text="Suriname" Value="SUR" />
            <Item Text="Slovaquie" Value="SVK" />
            <Item Text="Slovénie" Value="SVN" />
            <Item Text="Suède" Value="SWE" />
            <Item Text="Swaziland" Value="SWZ" />
            <Item Text="Seychelles" Value="SYC" />
            <Item Text="Syrie" Value="SYR" />
            <Item Text="Turks et Caicos" Value="TCA" />
            <Item Text="Tchad" Value="TCD" />
            <Item Text="Togo" Value="TGO" />
            <Item Text="Thaïlande" Value="THA" />
            <Item Text="Tadjikistan" Value="TJK" />
            <Item Text="Turkménistan" Value="TKM" />
            <Item Text="Timor Oriental" Value="TLS" />
            <Item Text="Tonga" Value="TON" />
            <Item Text="Trinité-et-Tobago" Value="TTO" />
            <Item Text="Tunisie" Value="TUN" />
            <Item Text="Turquie" Value="TUR" />
            <Item Text="Chinese Taipei" Value="TWN" />
            <Item Text="Tanzanie" Value="TZA" />
            <Item Text="Ouganda" Value="UGA" />
            <Item Text="Ukraine" Value="UKR" />
            <Item Text="Uruguay" Value="URY" />
            <Item Text="USA" Value="USA" />
            <Item Text="Ouzbékistan" Value="UZB" />
            <Item Text="Saint-Vincent-et-les-Grenadines" Value="VCT" />
            <Item Text="Venezuela" Value="VEN" />
            <Item Text="Iles Vierges Britanniques" Value="VGB" />
            <Item Text="Iles Vierges Américaines" Value="VIR" />
            <Item Text="Viêt-Nam" Value="VNM" />
            <Item Text="Vanuatu" Value="VUT" />
            <Item Text="Samoa" Value="WSM" />
            <Item Text="Yémen" Value="YEM" />
            <Item Text="Afrique du Sud" Value="ZAF" />
            <Item Text="Zambie" Value="ZMB" />
            <Item Text="Zimbabwe" Value="ZWE" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_ListenerGenre" TargetCollection="Restriction">
            <Item Text="Tous les genres" Value="All" />
            <Item Text="Classique" Value="Classical" />
            <Item Text="Pays" Value="Country" />
            <Item Text="Electronique / Danse" Value="Electronic" />
            <Item Text="Hip hop" Value="HipHop" />
            <Item Text="Le jazz" Value="Jazz" />
            <Item Text="Plus" Value="More" />
            <Item Text="Pop" Value="Pop" />
            <Item Text="R &amp; B / Soul" Value="RNB" />
            <Item Text="Rock" Value="Rock" />
            <Item Text="Musique" Value="Soundtracks" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_MarketingConsented" TargetCollection="Restriction">
            <Item Text="J'accepte de recevoir des offres promotionnelles par courriel" Value="true" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_MarketingFrequency" TargetCollection="Restriction">
            <Item Text="Journalier" Value="Daily" />
            <Item Text="De la semaine" Value="Weekly" />
            <Item Text="Mensuel" Value="Monthly" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_PlayerZone" TargetCollection="Restriction">
            <Item Text="Famille" Value="Family" />
            <Item Text="Professionnel" Value="Professional" />
            <Item Text="Récréation" Value="Recreation" />
            <Item Text="Underground" Value="Underground" />
          </LocalizedCollection>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_TermsOfServiceConsented" TargetCollection="Restriction">
            <Item Text="J'accepte les conditions d'utilisation de WingTip Toys" Value="2017-03-09" />
          </LocalizedCollection>
        </LocalizedCollections>
      </LocalizedResources>
      <LocalizedResources Id="api.idpselection.signin.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="intro">Connectez-vous avec votre compte existant</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.idpselection.signupsignin.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="intro">Connectez-vous avec votre compte social ou créez un compte WingTip</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.activation.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Confirmez votre adresse email.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous préparons votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Adresse e-mail</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Adresse e-mail</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.discovery.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Après</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Connectez-vous avec votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous trouvons votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="signInName" StringId="DisplayName">Adresse e-mail ou numéro de téléphone</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Se connecter</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Connectez-vous avec votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous vous signons</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="signInName" StringId="DisplayName">Adresse e-mail</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="password" StringId="DisplayName">Mot de passe</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.appcode.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Connectez-vous avec votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous trouvons votre application d'authentification</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Adresse e-mail</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.authycode.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Connectez-vous avec votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous trouvons votre compte Authy</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Adresse e-mail</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.emailcode.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Se connecter</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Connectez-vous avec votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Changer</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Envoie un autre</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Vérifier</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Envoyer le code de connexion</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">Nous vous avons envoyé un code de connexion. Copiez-le dans le champ de saisie ci-dessous.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Code de connexion</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">Nous avons vérifié votre adresse e-mail. Vous pouvez maintenant vous connecter.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous vous signons</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Adresse e-mail</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.phonecode.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Connectez-vous avec votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous trouvons votre numéro de téléphone</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Adresse e-mail</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordrecovery.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Entrez votre adresse e-mail et nous vous enverrons un code de vérification.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Changer</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Envoie un autre</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Vérifier</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Envoyer le code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">Nous vous avons envoyé un code de vérification. Copiez-le dans le champ de saisie ci-dessous.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Code de vérification</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">Nous avons vérifié votre adresse e-mail. Vous pouvez maintenant continuer.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous récupérons votre mot de passe</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Adresse e-mail</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Adresse e-mail</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordreset.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Entrez votre nouveau mot de passe.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous réinitialisons votre mot de passe</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">Nouveau mot de passe</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Devise du joueurConfirmer le nouveau mot de passe</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordset.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Entrez votre nouveau mot de passe.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous définissons votre mot de passe</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">Nouveau mot de passe</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Devise du joueurConfirmer le nouveau mot de passe</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.registration.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Créez votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="required_field">Vous devez entrer dans ce champ</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Changer</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Envoie un autre</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Vérifier</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Envoyer le code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">Nous vous avons envoyé un code de vérification. Copiez-le dans le champ de saisie ci-dessous.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Code de vérification</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">Nous avons vérifié votre adresse e-mail. Vous pouvez maintenant continuer.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous créons votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Adresse e-mail</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Adresse e-mail</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">Nouveau mot de passe</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Devise du joueurConfirmer le nouveau mot de passe</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="displayName" StringId="DisplayName">Afficher un nom</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.phonefactor.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_send_code">Écris moi</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="button_verify">Appelle-moi</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="country_code_label">Code postal</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="enter_code_text_intro">Entrez le code de vérification ou </LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="intro_entry_mixed">Entrez votre numéro de téléphone et nous vous enverrons un code de vérification par un message texte ou par un appel téléphonique.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="intro_mixed">Nous avons votre numéro de téléphone. We'll send you a verification code by either a text message or a phone call.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="number_label">Numéro de téléphone</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_number">Vous devez entrer un numéro de téléphone valide</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="text_button_send_second_code">envoyer un autre code de vérification</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="error_incorrect_code">Vous devez entrer le code de vérification que nous vous avons envoyé</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.appfactor.registration.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Vérifier</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro"></LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous enregistrons votre application d'authentification</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="strongAuthenticationAppCode" StringId="DisplayName">3. Entrez le code de vérification ou</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.appfactor.verification.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Vérifier</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Obtenez un code de vérification à partir de votre application d'authentification.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous vérifions votre application d'authentification</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="strongAuthenticationAppCode" StringId="DisplayName">Entrez le code de vérification ou</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.authyfactor.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Envoyer</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Envoyez une demande d'approbation à votre compte Authy.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous vous attendons pour approuver la demande d'approbation</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.consent.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Antes de continuar con nuestros servicios en línea, debe aceptar los términos de servicio de WingTip Toys.</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_TermsOfServiceConsented" StringId="DisplayName">Accepte les conditions d'utilisation</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.listenerprofileupdate.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Revise</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Mettre à jour votre profil d'écoute WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous mettons à jour votre profil d'écoute WingTip</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_ListenerGenre" StringId="DisplayName">Genre d'écoute</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_MarketingFrequency" StringId="DisplayName">Fréquence</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.playerprofileupdate.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Revise</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Mettez à jour votre profil de joueur WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous mettons à jour votre profil de joueur WingTip</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_ReadOnlyPlayerTag" StringId="DisplayName">Nom du joueur</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerZone" StringId="DisplayName">Zone du joueur</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerMotto" StringId="DisplayName">Devise du joueur</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerBio" StringId="DisplayName">Joueur bio</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_MarketingFrequency" StringId="DisplayName">Fréquence</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.playerprofileregistration.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Créer</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Créez votre profil de joueur WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous créons votre profil de joueur WingTip</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerTag" StringId="DisplayName">Nom du joueur</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerZone" StringId="DisplayName">Zone du joueur</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerMotto" StringId="DisplayName">Devise du joueur</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_PlayerBio" StringId="DisplayName">Joueur bio</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_MarketingFrequency" StringId="DisplayName">Fréquence</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.signupsignin.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="createaccount_intro">Vous n'avez pas de compte WingTip?</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="createaccount_link">Créez-en maintenant!</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_email">Vous devez entrer une adresse email valide</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_password">Vous devez entrer un mot de passe valide</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="local_intro_email">Connectez-vous avec votre compte WingTip</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="logonIdentifier_email">Adresse e-mail</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="remember_me">Gardez-moi connecté</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="requiredField_email">Vous devez entrer une adresse e-mail</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="requiredField_password">Vous devez entrer un mot de passe</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="password" StringId="DisplayName">Mot de passe</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.socialaccount.registration.fr">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Enregistrer</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Enregistrez votre compte social</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">Nous enregistrons votre compte social</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
    </Localization>
  </BuildingBlocks>
  <ClaimsProviders>
    <!-- The following claims provider defines the Amazon identity provider. -->
    <ClaimsProvider>
      <Domain>amazon.com</Domain>
      <DisplayName>Amazon Account</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile implements the OAuth 2.0 interactions for the Amazon identity provider. -->
        <TechnicalProfile Id="AmazonAccount-OAuth2">
          <DisplayName>Amazon Account</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">amazon.com</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="authorization_endpoint">https://www.amazon.com/ap/oa</Item>
            <Item Key="AccessTokenEndpoint">https://api.amazon.com/auth/o2/token</Item>
            <Item Key="ClaimsEndpoint">https://api.amazon.com/user/profile</Item>
            <Item Key="scope">profile</Item>
            <Item Key="client_id">amzn1.application-oa2-client.10e7d2cef9bc40b4a9a910434633e580</Item>
            <Item Key="UsePolicyInRedirectUri">0</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="client_secret" StorageReferenceId="AmazonClientSecret" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="emailFromSocialAccount" PartnerClaimType="email" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="amazon.com" />
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="user_id" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateExternalUserName" />
            <OutputClaimsTransformation ReferenceId="CreateExternalUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>App Factor</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile registers a verification phone. -->
        <TechnicalProfile Id="AppFactor-Input">
          <DisplayName>App Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.appfactor.registration</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureFunctions-VerifyTotpWebHook" />
          </ValidationTechnicalProfiles>
          <!--<UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />-->
        </TechnicalProfile>
        <!-- The following technical profile verifies a verification phone. -->
        <TechnicalProfile Id="AppFactor-Verify">
          <DisplayName>App Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.appfactor.verification</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureFunctions-VerifyTotpWebHook" />
          </ValidationTechnicalProfiles>
          <!--<UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />-->
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Authy Factor</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile registers an Authy phone. -->
        <TechnicalProfile Id="AuthyFactor-InputOrVerify">
          <DisplayName>Authy Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.authyfactor</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
            <InputClaim ClaimTypeReferenceId="extension_AuthyId" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureFunctions-CreateAndWaitForAuthyApprovalRequestWebHook" />
          </ValidationTechnicalProfiles>
          <!--<UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />-->
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the Azure Active Directory identity store. -->
    <ClaimsProvider>
      <DisplayName>Azure Active Directory Store</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile implements the common properties for the Azure Active Directory identity store. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-Common">
          <DisplayName>Azure Active Directory Store</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ApplicationObjectId">4eb943a5-5fb3-4193-bc18-116c76f6717b</Item>
            <Item Key="ClientId">7f15ff45-5274-46eb-986b-7622c13461b0</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile reads a user, identified by the alternative security identifier for the user, from the
             Azure Active Directory identity store. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" PartnerClaimType="alternativeSecurityId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="givenName" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="surname" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_Brand" />
            <OutputClaim ClaimTypeReferenceId="extension_Gender" />
            <OutputClaim ClaimTypeReferenceId="extension_ListenerGenre" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingFrequency" />
            <OutputClaim ClaimTypeReferenceId="extension_Picture" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerBio" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerMotto" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerTag" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerZone" />
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile reads a user, identified by the email address for the user, from the Azure Active Directory
             identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-ReadUserByEmail-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="otherMails" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="AzureActiveDirectoryStore-ReadUserByEmailOrPhone-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="signInNames" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="signInNames.phoneNumber" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile reads a user, identified by the object identifier for the user, from the Azure Active
             Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">User does not exist. You must sign up before you can sign in.</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="givenName" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="surname" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_Brand" />
            <OutputClaim ClaimTypeReferenceId="extension_Gender" />
            <OutputClaim ClaimTypeReferenceId="extension_ListenerGenre" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingFrequency" />
            <OutputClaim ClaimTypeReferenceId="extension_Picture" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerBio" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerMotto" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerTag" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerZone" />
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the social account profile for a user, identified by the object identifier for
             the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserAccountProfileByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="displayName" />
            <PersistedClaim ClaimTypeReferenceId="givenNameFromSocialAccount" PartnerClaimType="givenName" />
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="otherMails" />
            <PersistedClaim ClaimTypeReferenceId="surnameFromSocialAccount" PartnerClaimType="surname" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="extension_GenderFromSocialAccount" PartnerClaimType="extension_Gender" />
            <PersistedClaim ClaimTypeReferenceId="extension_PictureFromSocialAccount" PartnerClaimType="extension_Picture" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the social account for a user, identified by the object identifier for the user,
             in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserAlternativeAccountByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <PersistedClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="displayName" />
            <PersistedClaim ClaimTypeReferenceId="givenNameFromSocialAccount" PartnerClaimType="givenName" />
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="otherMails" />
            <PersistedClaim ClaimTypeReferenceId="surnameFromSocialAccount" PartnerClaimType="surname" />
            <PersistedClaim ClaimTypeReferenceId="extension_GenderFromSocialAccount" PartnerClaimType="extension_Gender" />
            <PersistedClaim ClaimTypeReferenceId="extension_PictureFromSocialAccount" PartnerClaimType="extension_Picture" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the verification app for a user, identified by the object identifier for the user,
             in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserAppByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <PersistedClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the Authy account for a user, identified by the object identifier for the user,
             in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserAuthyByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_AuthyId" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile creates a user, identified by the alternative security identifier for the user, in the
             Azure Active Directory identity store. An error is raised if the user already exists. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserByAlternativeSecurityId-ThrowIfExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalAlreadyExists">You are already registered. Select the back button and sign in.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <PersistedClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="displayName" />
            <PersistedClaim ClaimTypeReferenceId="givenNameFromSocialAccount" PartnerClaimType="givenName" />
            <PersistedClaim ClaimTypeReferenceId="mailNickname" DefaultValue="Unknown" />
            <PersistedClaim ClaimTypeReferenceId="otherMails" />
            <PersistedClaim ClaimTypeReferenceId="passwordPolicies" DefaultValue="DisablePasswordExpiration" />
            <PersistedClaim ClaimTypeReferenceId="surnameFromSocialAccount" PartnerClaimType="surname" />
            <PersistedClaim ClaimTypeReferenceId="userPrincipalName" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="extension_Brand" />
            <PersistedClaim ClaimTypeReferenceId="extension_GenderFromSocialAccount" PartnerClaimType="extension_Gender" />
            <PersistedClaim ClaimTypeReferenceId="extension_PictureFromSocialAccount" PartnerClaimType="extension_Picture" />
            <PersistedClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile creates a user, identified by the email address for the user, in the Azure Active Directory
             identity store. An error is raised if the user already exists. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserByEmail-ThrowIfExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalAlreadyExists">You are already registered. Select the back button and sign in.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="displayName" />
            <PersistedClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" />
            <PersistedClaim ClaimTypeReferenceId="givenName" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
            <PersistedClaim ClaimTypeReferenceId="passwordPolicies" DefaultValue="DisablePasswordExpiration" />
            <PersistedClaim ClaimTypeReferenceId="surname" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="extension_Brand" />
            <PersistedClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile updates the consent for a user, identified by the object identifier for the user, in the
             Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserConsentByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the password for a user, identified by the object identifier for the user, in the
             Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserPasswordByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the verification phone number for a user, identified by the object identifier for
             the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserPhoneNumberByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the local account profile for a user, identified by the object identifier for the
             user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AzureActiveDirectoryStore-WriteUserSelfAssertedProfileByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_ListenerGenre" />
            <PersistedClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <PersistedClaim ClaimTypeReferenceId="extension_MarketingFrequency" />
            <PersistedClaim ClaimTypeReferenceId="extension_PlayerBio" />
            <PersistedClaim ClaimTypeReferenceId="extension_PlayerMotto" />
            <PersistedClaim ClaimTypeReferenceId="extension_PlayerTag" />
            <PersistedClaim ClaimTypeReferenceId="extension_PlayerZone" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AzureActiveDirectoryStore-Common" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the Azure Functions REST provider. -->
    <ClaimsProvider>
      <DisplayName>Azure Functions</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile calculates the player profile percent complete for a user. -->
        <TechnicalProfile Id="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook">
          <DisplayName>Calculate Player Profile Percent Complete Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipb2cfuncs.azurewebsites.net/api/CalculatePlayerProfilePercentCompleteWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="extension_PlayerBio" PartnerClaimType="playerBio" />
            <InputClaim ClaimTypeReferenceId="extension_PlayerMotto" PartnerClaimType="playerMotto" />
            <InputClaim ClaimTypeReferenceId="extension_PlayerTag" PartnerClaimType="playerTag" />
            <InputClaim ClaimTypeReferenceId="extension_PlayerZone" PartnerClaimType="playerZone" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_PlayerProfilePercentComplete" PartnerClaimType="playerProfilePercentComplete" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile checks whether the email address that is associated with a social account matches the email
             address that is associated with an invitation link. -->
        <TechnicalProfile Id="AzureFunctions-CheckEmailWebHook">
          <DisplayName>Check Player Tag Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipb2cfuncs.azurewebsites.net/api/CheckEmailWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="emailFromSocialAccount" PartnerClaimType="emailFromSocialAccount" />
            <InputClaim ClaimTypeReferenceId="extension_VerifiedEmail" PartnerClaimType="verifiedEmail" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile checks whether a player tag already exists. -->
        <TechnicalProfile Id="AzureFunctions-CheckPlayerTagWebHook">
          <DisplayName>Check Player Tag Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipb2cfuncs.azurewebsites.net/api/CheckPlayerTagWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="extension_PlayerTag" PartnerClaimType="playerTag" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile creates an Authy approval request and waits for it to be completed. -->
        <TechnicalProfile Id="AzureFunctions-CreateAndWaitForAuthyApprovalRequestWebHook">
          <DisplayName>Create Authy User Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipb2cfuncs.azurewebsites.net/api/CreateAndWaitForAuthyApprovalRequestWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
            <InputClaim ClaimTypeReferenceId="extension_AuthyId" PartnerClaimType="authyId" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile creates an Authy user. -->
        <TechnicalProfile Id="AzureFunctions-CreateAuthyUserWebHook">
          <DisplayName>Create Authy User Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipb2cfuncs.azurewebsites.net/api/CreateAuthyUserWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" PartnerClaimType="phoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" PartnerClaimType="authyId" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile generates a time-based one-time password (TOTP). -->
        <TechnicalProfile Id="AzureFunctions-GenerateTotpWebHook">
          <DisplayName>Generate TOTP Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipb2cfuncs.azurewebsites.net/api/GenerateTotpWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" PartnerClaimType="qrCodeBitmap" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" PartnerClaimType="secretKey" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile sends a mail message to a user. -->
        <TechnicalProfile Id="AzureFunctions-SendMailWebHook">
          <DisplayName>Send Mail Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipb2cfuncs.azurewebsites.net/api/SendMailWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateFromMailAddress" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="fromMailAddress" PartnerClaimType="fromAddress" />
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="toAddress" />
            <InputClaim ClaimTypeReferenceId="extension_Brand" PartnerClaimType="brand" />
            <InputClaim ClaimTypeReferenceId="displayName" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile verifies a time-based one-time password (TOTP). -->
        <TechnicalProfile Id="AzureFunctions-VerifyTotpWebHook">
          <DisplayName>Verify TOTP Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipb2cfuncs.azurewebsites.net/api/VerifyTotpWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" PartnerClaimType="totpCode" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" PartnerClaimType="secretKey" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" PartnerClaimType="timeStepMatched" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" PartnerClaimType="timeStepMatched" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines a REST provider that enables users to be migrated from a SQL identity store to the Azure
         Active Directory identity store and synchronized between these stores. -->
    <ClaimsProvider>
      <DisplayName>Classic Account</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile is called when a user is logging in. It creates the user in the Azure Active Directory
             identity store if the user does not exist or updates the password for the user in the Azure Active Directory identity store
             if the user does exist. -->
        <TechnicalProfile Id="ClassicAccount-CheckNonce">
          <DisplayName>Classic Account Check Nonce</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account/checknonce</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_WingTipClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_WingTipClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="extension_verifiedEmail" PartnerClaimType="userName" />
            <InputClaim ClaimTypeReferenceId="extension_Nonce" PartnerClaimType="nonce" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile is called when a user is logging in. It creates the user in the Azure Active Directory
             identity store if the user does not exist or updates the password for the user in the Azure Active Directory identity store
             if the user does exist. -->
        <TechnicalProfile Id="ClassicAccount-CheckPassword">
          <DisplayName>Classic Account Check Password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account/checkpassword</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_WingTipClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_WingTipClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="userName" />
            <InputClaim ClaimTypeReferenceId="password" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile either is called when a user is registering. It creates the user in the SQL identity store
             if the user does not exist or updates the password for the user in the SQL identity store if the user does exist. -->
        <TechnicalProfile Id="ClassicAccount-Create">
          <DisplayName>Classic Account Create</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_WingTipClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_WingTipClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
            <InputClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
            <InputClaim ClaimTypeReferenceId="displayName" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile is called when a user is recovering a password. It creates the user in the Azure Active
             Directory identity store if the user does not exist. -->
        <TechnicalProfile Id="ClassicAccount-RecoverPassword">
          <DisplayName>Classic Account Recover Password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account/recoverpassword</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_WingTipClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_WingTipClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile is called when a user is resetting a password. It updates the password for the user in
             the SQL identity store. -->
        <TechnicalProfile Id="ClassicAccount-ResetPassword">
          <DisplayName>Classic Account Reset Password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account/resetpassword</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_WingTipClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_WingTipClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
            <InputClaim ClaimTypeReferenceId="newPassword" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the Facebook identity provider. -->
    <ClaimsProvider>
      <Domain>facebook.com</Domain>
      <DisplayName>Facebook Account</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile implements the OAuth 2.0 interactions for the Facebook identity provider. -->
        <TechnicalProfile Id="FacebookAccount-OAuth2">
          <DisplayName>Facebook Account</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">facebook.com</Item>
            <Item Key="HttpBinding">GET</Item>
            <Item Key="authorization_endpoint">https://www.facebook.com/dialog/oauth</Item>
            <Item Key="AccessTokenEndpoint">https://graph.facebook.com/oauth/access_token</Item>
            <Item Key="ClaimsEndpoint">https://graph.facebook.com/me?fields=id,email,first_name,gender,last_name,name,picture</Item>
            <Item Key="scope">email</Item>
            <Item Key="client_id">294488804298672</Item>
            <Item Key="AccessTokenResponseFormat">json</Item>
            <Item Key="UsePolicyInRedirectUri">0</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="client_secret" StorageReferenceId="FacebookClientSecret" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="emailFromSocialAccount" PartnerClaimType="email" />
            <OutputClaim ClaimTypeReferenceId="givenNameFromSocialAccount" PartnerClaimType="first_name" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="facebook.com" />
            <OutputClaim ClaimTypeReferenceId="surnameFromSocialAccount" PartnerClaimType="last_name" />
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="id" />
            <OutputClaim ClaimTypeReferenceId="extension_GenderFromSocialAccount" PartnerClaimType="gender" />
            <OutputClaim ClaimTypeReferenceId="extension_PictureFromSocialAccount" PartnerClaimType="picture" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateExternalUserName" />
            <OutputClaimsTransformation ReferenceId="CreateExternalUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the local account provider. -->
    <ClaimsProvider>
      <DisplayName>Local Account</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile activates a local account. -->
        <TechnicalProfile Id="LocalAccount-Activation">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.activation</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateEmailFromVerifiedEmail" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="extension_VerifiedEmail" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_VerifiedEmail" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-CheckNonce" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccount-Discovery">
          <DisplayName>Local Account Discovery</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.discovery</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="signInNames.phoneNumber" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CompareSignInNameAndEmailClaims" />
            <OutputClaimsTransformation ReferenceId="CompareSignInNameAndPhoneClaims" />
          </OutputClaimsTransformations>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-ReadUserByEmailOrPhone-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account. -->
        <TechnicalProfile Id="LocalAccount-Login">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login</Item>
            <Item Key="setting.operatingMode">Email</Item>
            <Item Key="SignUpTarget">LocalAccountRegistrationExchange</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInName" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="password" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-CheckPassword" />
            <ValidationTechnicalProfile ReferenceId="LocalAccount-OpenIdConnect" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account using an app code. -->
        <TechnicalProfile Id="LocalAccount-Login-AppCode">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login.appcode</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account using an Authy code. -->
        <TechnicalProfile Id="LocalAccount-Login-AuthyCode">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login.authycode</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account using an email code. -->
        <TechnicalProfile Id="LocalAccount-Login-EmailCode">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login.emailcode</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account using a phone code. -->
        <TechnicalProfile Id="LocalAccount-Login-PhoneCode">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login.phonecode</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile authenticates a local account. -->
        <TechnicalProfile Id="LocalAccount-OpenIdConnect">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="OpenIdConnect" />
          <Metadata>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">We can't seem to find your account</Item>
            <Item Key="UserMessageIfInvalidPassword">Your password is incorrect</Item>
            <Item Key="UserMessageIfOldPasswordUsed">Looks like you used an old password</Item>
            <Item Key="ProviderName">https://sts.windows.net/</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="METADATA">https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration</Item>
            <Item Key="authorization_endpoint">https://login.microsoftonline.com/{tenant}/oauth2/token</Item>
            <Item Key="scope">openid email</Item>
            <Item Key="response_types">id_token</Item>
            <Item Key="response_mode">query</Item>
            <Item Key="client_id">1d2e42b6-7685-4d2c-82c2-7318fce0d740</Item>
            <Item Key="IdTokenAudience">bb2a2e3a-c5e7-4f0a-88e0-8e01fd3fc1f4</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="UsePolicyInRedirectUri">false</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="1d2e42b6-7685-4d2c-82c2-7318fce0d740" />
            <InputClaim ClaimTypeReferenceId="grant_type" DefaultValue="password" />
            <InputClaim ClaimTypeReferenceId="nca" PartnerClaimType="nca" DefaultValue="1" />
            <InputClaim ClaimTypeReferenceId="password" Required="true" />
            <InputClaim ClaimTypeReferenceId="scope" DefaultValue="openid" />
            <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="username" Required="true" />
            <InputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="resource" DefaultValue="bb2a2e3a-c5e7-4f0a-88e0-8e01fd3fc1f4" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
            <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="oid" />
            <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name" />
            <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="upn" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
        </TechnicalProfile>
        <!-- The following technical profile recovers the password for a local account. -->
        <TechnicalProfile Id="LocalAccount-PasswordRecovery">
          <DisplayName>Reset password using email address</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.passwordrecovery</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile resets a local account password. -->
        <TechnicalProfile Id="LocalAccount-PasswordReset">
          <DisplayName>Reset password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.passwordreset</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" />
            <InputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserPasswordByObjectId-ThrowIfNotExists" />
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-ResetPassword" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile sets a local account password. -->
        <TechnicalProfile Id="LocalAccount-PasswordSet">
          <DisplayName>Reset password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.passwordset</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" />
            <InputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserPasswordByObjectId-ThrowIfNotExists" />
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-ResetPassword" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile registers a local account. -->
        <TechnicalProfile Id="LocalAccount-Registration-UnverifiedEmail">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.registration</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="language.button_continue">Create</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="displayName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserByEmail-ThrowIfExists" />
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-Create" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile registers a local account. -->
        <TechnicalProfile Id="LocalAccount-Registration-VerifiedEmail">
          <DisplayName>WingTip Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.registration</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="language.button_continue">Create</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateEmailFromVerifiedEmail" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="extension_VerifiedEmail" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_VerifiedEmail" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="displayName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserByEmail-ThrowIfExists" />
            <ValidationTechnicalProfile ReferenceId="ClassicAccount-Create" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the verification phone provider. -->
    <ClaimsProvider>
      <DisplayName>Phone Factor</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile registers a verification phone. -->
        <TechnicalProfile Id="PhoneFactor-Input">
          <DisplayName>Phone Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-PhoneFactor-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="countryCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />
        </TechnicalProfile>
        <!-- The following technical profile validates a verification phone. -->
        <TechnicalProfile Id="PhoneFactor-InputOrVerify">
          <DisplayName>Phone Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="countryCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />
        </TechnicalProfile>
        <!-- The following technical profile verifies a verification phone. -->
        <TechnicalProfile Id="PhoneFactor-VerifyByAuthenticationPhoneNumber">
          <DisplayName>Phone Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />
        </TechnicalProfile>
        <!-- The following technical profile verifies a verification phone. -->
        <TechnicalProfile Id="PhoneFactor-VerifyByPhoneNumberSignInName">
          <DisplayName>Phone Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="setting.authenticationMode">sms</Item>
            <Item Key="setting.autodial">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
            <InputClaim ClaimTypeReferenceId="signInNames.phoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the self-asserted provider. -->
    <ClaimsProvider>
      <DisplayName>Self Asserted</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile updates the consent for a user. -->
        <TechnicalProfile Id="SelfAsserted-Consent">
          <DisplayName>User Consent</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.consent</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserConsentByObjectId-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile updates the listener profile for a user. -->
        <TechnicalProfile Id="SelfAsserted-ListenerProfileUpdate">
          <DisplayName>Listener User Profile Update</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.listenerprofileupdate</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <InputClaim ClaimTypeReferenceId="userPrincipalName" />
            <InputClaim ClaimTypeReferenceId="extension_ListenerGenre" />
            <InputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <InputClaim ClaimTypeReferenceId="extension_MarketingFrequency" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="extension_ListenerGenre" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingFrequency" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserSelfAssertedProfileByObjectId-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile registers the minimum player profile for a user. -->
        <TechnicalProfile Id="SelfAsserted-PlayerProfileRegistration-Basic">
          <DisplayName>Local User Registration</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.playerprofileregistration.basic</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerTag" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" DefaultValue="false" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingFrequency" DefaultValue="Weekly" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureFunctions-CheckPlayerTagWebHook" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserSelfAssertedProfileByObjectId-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile registers the maximum player profile for a user. -->
        <TechnicalProfile Id="SelfAsserted-PlayerProfileRegistration-Full">
          <DisplayName>Local User Registration</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.playerprofileregistration.full</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerTag" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerZone" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerMotto" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerBio" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" DefaultValue="false" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingFrequency" DefaultValue="Weekly" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureFunctions-CheckPlayerTagWebHook" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserSelfAssertedProfileByObjectId-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile updates the player profile for a user. -->
        <TechnicalProfile Id="SelfAsserted-PlayerProfileUpdate">
          <DisplayName>Player User Profile Update</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.playerprofileupdate</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateReadOnlyPlayerTagFromPlayerTag" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <InputClaim ClaimTypeReferenceId="userPrincipalName" />
            <InputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <InputClaim ClaimTypeReferenceId="extension_MarketingFrequency" />
            <InputClaim ClaimTypeReferenceId="extension_PlayerBio" />
            <InputClaim ClaimTypeReferenceId="extension_PlayerMotto" />
            <InputClaim ClaimTypeReferenceId="extension_ReadOnlyPlayerTag" />
            <InputClaim ClaimTypeReferenceId="extension_PlayerZone" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="extension_ReadOnlyPlayerTag" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerZone" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerMotto" />
            <OutputClaim ClaimTypeReferenceId="extension_PlayerBio" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingFrequency" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserSelfAssertedProfileByObjectId-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the social account provider. -->
    <ClaimsProvider>
      <DisplayName>Social Account</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile registers a social account. -->
        <TechnicalProfile Id="SocialAccount-Registration-UnverifiedEmail">
          <DisplayName>Social Account Registration</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.socialaccount.registration</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateEmailFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserByAlternativeSecurityId-ThrowIfExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile registers a social account. -->
        <TechnicalProfile Id="SocialAccount-Registration-VerifiedEmail">
          <DisplayName>Social Account Registration</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.consent</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateEmailFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureFunctions-CheckEmailWebHook" />
            <ValidationTechnicalProfile ReferenceId="AzureActiveDirectoryStore-WriteUserByAlternativeSecurityId-ThrowIfExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the single sign-on (SSO) session provider. -->
    <ClaimsProvider>
      <DisplayName>SSO Session</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile manages the Azure Active Directory SSO session. -->
        <TechnicalProfile Id="SSOSession-AzureActiveDirectory">
          <DisplayName>Azure Active Directory Session Management</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="authenticationSource" />
            <PersistedClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" />
            <PersistedClaim ClaimTypeReferenceId="identityProvider" />
            <PersistedClaim ClaimTypeReferenceId="newUser" />
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="signInName" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectIdFromSession" DefaultValue="true" />
          </OutputClaims>
        </TechnicalProfile>
        <!-- The following technical profile manages a no-op SSO session. -->
        <TechnicalProfile Id="SSOSession-Noop">
          <DisplayName>Noop Session Management</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.NoopSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
        </TechnicalProfile>
        <!-- The following technical profile manages the social account login SSO session. -->
        <TechnicalProfile Id="SSOSession-SocialLogin">
          <DisplayName>Social Login Session Mananagement</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.ExternalLoginSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="AlwaysFetchClaimsFromProvider">true</Item>
          </Metadata>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId" />
          </PersistedClaims>
        </TechnicalProfile>
        <!-- The following technical profile manages the social account registration SSO session. -->
        <TechnicalProfile Id="SSOSession-SocialRegistration">
          <IncludeTechnicalProfile ReferenceId="SSOSession-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile manages the verification phone SSO session. -->
        <TechnicalProfile Id="SSOSession-PhoneFactor">
          <DisplayName>Phone Factor Session Mananagement</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="executed-PhoneFactor-Input" />
            <PersistedClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="isActivePhoneFactorSession" DefaultValue="true" />
          </OutputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the token issuer provider. -->
    <ClaimsProvider>
      <DisplayName>Token Issuer</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile implements the JSON Web Token (JWT) token issuer. -->
        <TechnicalProfile Id="JwtIssuer">
          <DisplayName>JSON Web Token Issuer</DisplayName>
          <Protocol Name="None" />
          <OutputTokenFormat>JWT</OutputTokenFormat>
          <Metadata>
            <Item Key="client_id">{service:te}</Item>
            <Item Key="issuer_refresh_token_user_identity_claim_type">objectId</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="TokenSigningKeyContainer" />
            <Key Id="issuer_refresh_token_key" StorageReferenceId="TokenEncryptionKeyContainer" />
          </CryptographicKeys>
        </TechnicalProfile>
        <!-- The following technical profile implements the Security Assertion Markup Language 2.0 (SAML 2.0) token issuer. -->
        <TechnicalProfile Id="Saml2AssertionIssuer">
          <DisplayName>SAML 2.0 Token Issuer</DisplayName>
          <Protocol Name="None" />
          <OutputTokenFormat>SAML2</OutputTokenFormat>
          <Metadata>
            <Item Key="IssuerUri">https://login.microsoftonline.com/te/b2ctechready.onmicrosoft.com/samlp</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="SamlAssertionSigning" StorageReferenceId="SamlTokenSigningCertificate" />
            <Key Id="SamlMessageSigning" StorageReferenceId="SamlTokenSigningCertificate" />
          </CryptographicKeys>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following claims provider defines the trust framework policy engine provider. -->
    <ClaimsProvider>
      <DisplayName>Trust Framework Policy Engine</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile represents the trust framework policy engine. -->
        <TechnicalProfile Id="TpEngine_c3bd4fe2-1775-4013-b91d-35f16d377d13">
          <DisplayName>Trust Framework Policy Engine</DisplayName>
          <Protocol Name="None" />
          <Metadata>
            <Item Key="url">{service:te}</Item>
          </Metadata>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
  </ClaimsProviders>
  <UserJourneys>
    <!-- The following user journey is used for registering a local account via an activation link. This user journey requires the email
         address for the local account, to which the activation link has been sent, to be passed as an input claim called "extension_VerifiedEmail".
         See the "B2C_1A_activation" policy for an example of this.
         The high-level steps for this user journey are:
           1. The user confirms the email address for a local account to which the activation link has been sent. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. The user enters the new password for the local account. The local account is synchronized from the Azure Active Directory
              identity store to the SQL one with the new password.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="Activation">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountPasswordRecoveryVerifiedEmailExchange" TechnicalProfileReferenceId="LocalAccount-Activation" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the password for a user, identified by the object identifier
             for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. It can then
             update the password for the user in the SQL identity store.-->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountPasswordResetWithSSOSessionExchange" TechnicalProfileReferenceId="LocalAccount-PasswordSet" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to consent to terms of service. It updates
             the consent for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_TermsOfServiceConsented</Value>
              <Value>2017-03-09</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedConsentExchange" TechnicalProfileReferenceId="SelfAsserted-Consent" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed when the user is registering. It sends a mail message to the user. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsSendMailWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-SendMailWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register the minimum player profile. It
             checks whether a player tag already exists and then updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>extension_PlayerTag</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_PlayerProfileRegistrationMode</Value>
              <Value>Full</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountPlayerProfileRegistrationBasicExchange" TechnicalProfileReferenceId="SelfAsserted-PlayerProfileRegistration-Basic" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register the maximum player profile. It
             checks whether a player tag already exists and then updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>extension_PlayerTag</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_PlayerProfileRegistrationMode</Value>
              <Value>Basic</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountPlayerProfileRegistrationFullExchange" TechnicalProfileReferenceId="SelfAsserted-PlayerProfileRegistration-Full" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register a verification phone. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActivePhoneFactorSession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorInputExchange" TechnicalProfileReferenceId="PhoneFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a verification phone. It updates the verification
             phone number for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserPhoneNumberByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserPhoneNumberByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="11" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for registering a local or social account via an invitation link. This user journey requires
         the email address for the user, to which the invitation link has been sent, to be passed as an input claim called "extension_VerifiedEmail".
         See the "B2C_1A_invitation" policy for an example of this.
         The high-level steps for this user journey are:
           1. The user logs in or registers a local or social account. If the user logs in a local account and the local account does
              exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the
              SQL identity store to the Azure Active Directory one with the SQL-managed password. If the user registers a local account,
              then the local account is synchronized from the Azure Active Directory identity store to the SQL one with the Azure Active
              Directory-managed password. 
           2. If the user logs in a social account, then the email address that is associated with the social account must match the
              email address that is associated with the invitation link. If so, then the user profile is updated with the social account
              profile properties.
           3. If the user is required to consent to the current terms of service (i.e. if either the user is registering a new account
              or a new terms of service must be consented to), then the user is prompted to do so.
           4. If the user is registering a local account, then the email address that is associated with the social account must match
              the email address that is associated with the invitation link.
           5. If the user is required to register a player profile (i.e., if the user is accessing the WingTip Games app for the first
              time), then the user is prompted to do so.
           6. If the user is required to register a verification phone, then the user is prompted to do so.
           7. A JWT is issued to the relying party. -->
    <UserJourney Id="Invitation">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountRegistrationExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is registering a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. -->
            <ClaimsExchange Id="LocalAccountRegistrationExchange" TechnicalProfileReferenceId="LocalAccount-Registration-VerifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdBeforeWriteUserExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a social account. It creates a user, identified
             by the alternative security identifier for the user, in the Azure Active Directory identity store. An error is raised if
             the user already exists. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedSocialAccountRegistrationVerifiedEmailExchange" TechnicalProfileReferenceId="SocialAccount-Registration-VerifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It updates the social account
             profile for the user, identified by the object identifier for the user, in the Azure Active Directory identity store. An
             error is raised if the user does not exist. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>newUser</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserAccountProfileByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserAccountProfileByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It re-reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdAfterWriteUserExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to consent to terms of service. It updates
             the consent for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_TermsOfServiceConsented</Value>
              <Value>2017-03-09</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedConsentExchange" TechnicalProfileReferenceId="SelfAsserted-Consent" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering. It sends a mail message to the user. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>newUser</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsSendMailWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-SendMailWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register the minimum player profile. It
             checks whether a player tag already exists and then updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>extension_PlayerTag</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_PlayerProfileRegistrationMode</Value>
              <Value>Full</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountPlayerProfileRegistrationBasicExchange" TechnicalProfileReferenceId="SelfAsserted-PlayerProfileRegistration-Basic" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register the maximum player profile. It
             checks whether a player tag already exists and then updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>extension_PlayerTag</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_PlayerProfileRegistrationMode</Value>
              <Value>Basic</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountPlayerProfileRegistrationFullExchange" TechnicalProfileReferenceId="SelfAsserted-PlayerProfileRegistration-Full" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="12" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register a verification phone. -->
        <OrchestrationStep Order="13" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActivePhoneFactorSession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorInputExchange" TechnicalProfileReferenceId="PhoneFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a verification phone. It updates the verification
             phone number for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="14" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserPhoneNumberByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserPhoneNumberByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="15" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for linking the local account for a user to the social account for the user.
         The high-level steps for this user journey are:
           1. The user logs in a local account. If the local account does exist in the SQL identity service but it does not exist in
              the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active Directory one with
              the SQL-managed password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. The user logs in a social account.
           4. The local account is linked to the social account.
           5. A JWT is issued to the relying party. -->
    <UserJourney Id="Link">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is always executed. It can create the user in the Azure Active Directory identity store
                 if the user does not exist or update the password for the user in the Azure Active Directory identity store if the
                 user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdBeforeUserWriteExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to verify a verification phone. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="5" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is linking to an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is linking to a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the social account for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserAlternativeAccountByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserAlternativeAccountByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It re-reads the user, identified by the object identifier for the
             user, from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdAfterUserWriteExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for resetting the password for a local account.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account to which a verification code is to be sent. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. The user verifies the verification code that was sent to the email address for the local account and then enters the
              new password for the local account. The local account is synchronized from the Azure Active Directory identity store
              to the SQL one with the new password.
           4. A JWT is issued to the relying party. -->
    <UserJourney Id="PasswordReset">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountPasswordRecoveryUnverifiedEmailExchange" TechnicalProfileReferenceId="LocalAccount-PasswordRecovery" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to verify a verification phone. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the password for a user, identified by the object identifier
             for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. It can then
             update the password for the user in the SQL identity store.-->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountPasswordResetWithoutSSOSessionExchange" TechnicalProfileReferenceId="LocalAccount-PasswordReset" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for updating the player profile for a user.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the local account does exist in the SQL identity service but it does not
              exist in the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active Directory
              one with the SQL-managed password.
           2. The user updates their player profile.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="ProfileUpdateForGames">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the local account profile for a user, identified by the
             object identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedPlayerProfileUpdateExchange" TechnicalProfileReferenceId="SelfAsserted-PlayerProfileUpdate" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="7" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for updating the listener profile for a user.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the local account does exist in the SQL identity service but it does not
              exist in the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active Directory
              one with the SQL-managed password.
           2. The user updates their listener profile.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="ProfileUpdateForMusic">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the local account profile for a user, identified by the
             object identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedListenerProfileUpdateExchange" TechnicalProfileReferenceId="SelfAsserted-ListenerProfileUpdate" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the WingTip Billing app.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the local account does exist in the SQL identity service but it does not
              exist in the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active Directory
              one with the SQL-managed password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. A SAML 2.0 token is issued to the relying party. -->
    <UserJourney Id="SignInForBilling">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed to verify a verification phone. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a SAML 2.0 token. -->
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Saml2AssertionIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the WingTip Games app using an app code.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account for which a verification code is to be verified. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. The user verifies the verification code.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="SignInForGamesUsingAppCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountIdentificationExchange" TechnicalProfileReferenceId="LocalAccount-Login-AppCode" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies the verification app for the user. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AppFactorVerifyExchange" TechnicalProfileReferenceId="AppFactor-Verify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the verification app time step matched for the user, identified
             by the object identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserAppByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserAppByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the WingTip Games app using an Authy code.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account for which an Authy code is to be verified. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. The user verifies the Authy code.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="SignInForGamesUsingAuthyCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountIdentificationExchange" TechnicalProfileReferenceId="LocalAccount-Login-AuthyCode" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies the Authy account for the user. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthyFactorInputOrVerifyExchange" TechnicalProfileReferenceId="AuthyFactor-InputOrVerify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the WingTip Games app using an email code.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account to which a verification code is to be sent. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. The user verifies the verification code that was sent to the email address for the local account.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="SignInForGamesUsingEmailCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountLoginEmailCodeExchange" TechnicalProfileReferenceId="LocalAccount-Login-EmailCode" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="4" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the WingTip Games app using either an email address or a phone number. -->
    <UserJourney Id="SignInForGamesUsingEmailOrPhone">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountDiscoveryExchange" TechnicalProfileReferenceId="LocalAccount-Discovery" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>signInNameIsSameAsEmail</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsProviderSelections>
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>signInNameIsSameAsPhone</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByPhoneNumberSignInName" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the WingTip Games app using a phone code.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account. If the local account does exist in the SQL identity service but
              it does not exist in the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active
              Directory one with a generated password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="SignInForGamesUsingPhoneCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountIdentificationExchange" TechnicalProfileReferenceId="LocalAccount-Login-PhoneCode" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies the verification phone for the user. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for registering, validating, and verifying a verification app.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the user logs in a local account and the local account does exist in the
              SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the SQL identity
              store to the Azure Active Directory one with the SQL-managed password.
           2. The user verifies a verification phone.
           3. The user registers the verification app.
           4. A JWT is issued to the relying party. -->
    <UserJourney Id="SignUpForGamesUsingAppCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies a verification phone. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It generates a verification app secret key for the user. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsGenerateTotpWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-GenerateTotpWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It registers a verification app. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AppFactorInputExchange" TechnicalProfileReferenceId="AppFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the verification app for the user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserAppByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserAppByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for registering, validating, and verifying an Authy account.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the user logs in a local account and the local account does exist in the
              SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the SQL identity
              store to the Azure Active Directory one with the SQL-managed password.
           2. The user verifies a verification phone.
           3. The user registers the Authy account.
           4. A JWT is issued to the relying party. -->
    <UserJourney Id="SignUpForGamesUsingAuthyCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies a verification phone. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It creates an Authy account for the user. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCreateAuthyUserWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CreateAuthyUserWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It registers the Authy account. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthyFactorInputOrVerifyExchange" TechnicalProfileReferenceId="AuthyFactor-InputOrVerify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserAuthyByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserAuthyByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in or registering a user to the WingTip Games app.
         The high-level steps for this user journey are:
           1. The user logs in or registers a local or social account. If the user logs in a local account and the local account does
              exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the
              SQL identity store to the Azure Active Directory one with the SQL-managed password. If the user registers a local account,
              then the local account is synchronized from the Azure Active Directory identity store to the SQL one with the Azure Active Directory-managed
              password. 
           2. If the user logs in a social account, then the user profile is updated with the social account profile properties.
           3. If the user is required to consent to the current terms of service (i.e. if either the user is registering a new account
              or a new terms of service must be consented to), then the user is prompted to do so.
           4. If the user is registering a new account, then a mail message is sent to the user.
           5. If the user is required to register a player profile (i.e., if the user is accessing the WingTip Games app for the first
              time), then the user is prompted to do so.
           6. If the user is required to register a verification phone, then the user is prompted to do so.
           7. A JWT is issued to the relying party. -->
    <UserJourney Id="SignUpOrSignInForGames">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account or registering a local account. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is registering a local account. It creates a user, identified
             by the email address for the user, in the Azure Active Directory identity store. An error is raised if the user already
             exists. It can then create the user in the existing identity store if the user does not exist or updates the password for
             the user in the existing identity store if the user does exist.-->
            <ClaimsExchange Id="LocalAccountRegistrationExchange" TechnicalProfileReferenceId="LocalAccount-Registration-UnverifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdBeforeWriteUserExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a social account. It creates a user, identified
             by the alternative security identifier for the user, in the Azure Active Directory identity store. An error is raised if
             the user already exists. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedSocialAccountRegistrationUnverifiedEmailExchange" TechnicalProfileReferenceId="SocialAccount-Registration-UnverifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It updates the social account
             profile for the user, identified by the object identifier for the user, in the Azure Active Directory identity store. An
             error is raised if the user does not exist. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>newUser</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserAccountProfileByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserAccountProfileByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It re-reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdAfterWriteUserExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to consent to terms of service. It updates
             the consent for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_TermsOfServiceConsented</Value>
              <Value>2017-03-09</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedConsentExchange" TechnicalProfileReferenceId="SelfAsserted-Consent" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering. It sends a mail message to the user. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>newUser</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsSendMailWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-SendMailWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register the minimum player profile. It
             checks whether a player tag already exists and then updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>extension_PlayerTag</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_PlayerProfileRegistrationMode</Value>
              <Value>Full</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountPlayerProfileRegistrationBasicExchange" TechnicalProfileReferenceId="SelfAsserted-PlayerProfileRegistration-Basic" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register the maximum player profile. It
             checks whether a player tag already exists and then updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>extension_PlayerTag</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_PlayerProfileRegistrationMode</Value>
              <Value>Basic</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountPlayerProfileRegistrationFullExchange" TechnicalProfileReferenceId="SelfAsserted-PlayerProfileRegistration-Full" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="12" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register a verification phone. -->
        <OrchestrationStep Order="13" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActivePhoneFactorSession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorInputExchange" TechnicalProfileReferenceId="PhoneFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a verification phone. It updates the verification
             phone number for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="14" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserPhoneNumberByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserPhoneNumberByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="15" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in or registering a user to the WingTip Music app.
         The high-level steps for this user journey are:
           1. The user logs in or registers a local or social account. If the user logs in a local account and the local account does
              exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the
              SQL identity store to the Azure Active Directory one with the SQL-managed password. If the user registers a local account,
              then the local account is synchronized from the Azure Active Directory identity store to the SQL one with the Azure Active Directory-managed
              password.
           2. If the user logs in a social account, then the user profile is updated with the social account profile properties.
           3. If the user is required to consent to the current terms of service (i.e. if either the user is registering a new account
              or a new terms of service must be consented to), then the user is prompted to do so.
           4. If the user is registering a new account, then a mail message is sent to the user.
           5. A JWT is issued to the relying party. -->
    <UserJourney Id="SignUpOrSignInForMusic">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account or registering a local account. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is registering a local account. It creates a user, identified
             by the email address for the user, in the Azure Active Directory identity store. An error is raised if the user already
             exists. It can then create the user in the existing identity store if the user does not exist or updates the password for
             the user in the existing identity store if the user does exist.-->
            <ClaimsExchange Id="LocalAccountRegistrationExchange" TechnicalProfileReferenceId="LocalAccount-Registration-UnverifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdBeforeWriteUserExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a social account. It creates a user, identified
             by the alternative security identifier for the user, in the Azure Active Directory identity store. An error is raised if
             the user already exists. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedSocialAccountRegistrationUnverifiedEmailExchange" TechnicalProfileReferenceId="SocialAccount-Registration-UnverifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It updates the social account
             profile for the user, identified by the object identifier for the user, in the Azure Active Directory identity store. An
             error is raised if the user does not exist. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>newUser</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryWriteUserAccountProfileByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-WriteUserAccountProfileByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It re-reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdAfterWriteUserExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to consent. It updates the consent for the
             user, identified by the object identifier for the user, in the Azure Active Directory identity store. An error is raised
             if the user does not exist. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_TermsOfServiceConsented</Value>
              <Value>2017-03-09</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedConsentExchange" TechnicalProfileReferenceId="SelfAsserted-Consent" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering. It sends a mail message to the user. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>newUser</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsSendMailWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-SendMailWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for stepping up a user to the WingTip Games app.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the local account does exist in the SQL identity service but it does not
              exist in the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active Directory
              one with the SQL-managed password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="StepUp">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="AmazonAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="FacebookAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in an Amazon account. -->
            <ClaimsExchange Id="AmazonAccountExchange" TechnicalProfileReferenceId="AmazonAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="FacebookAccountExchange" TechnicalProfileReferenceId="FacebookAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AzureActiveDirectoryStore-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It calculates the player profile percent complete for the user. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCalculatePlayerProfilePercentCompleteWebHookExchange" TechnicalProfileReferenceId="AzureFunctions-CalculatePlayerProfilePercentCompleteWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed to verify a verification phone. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="7" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
  </UserJourneys>
</TrustFrameworkPolicy>